@startuml register

' General configuration
skinparam defaultFontSize 30
skinparam maxMessageSize 10

' Actor style configuration
skinparam actorStyle awesome

' Arrow and border thickness configuration
skinparam {
    ArrowThickness 2
    ParticipantBorderThickness 2
    ActorBorderThickness 2
    LifeLineBorderThickness 2
    ActivationBorderThickness 2
}

' Life line color configuration
skinparam LifeLineBorderColor black

' Font style configuration for components
skinparam {
    actorFontStyle bold
    boundaryFontStyle bold
    controlFontStyle bold
    entityFontStyle bold
    databaseFontStyle bold
}

' Define components
actor "Actor" as actor
boundary "HomePage" as homePage
boundary "SignupPage" as signupPage
boundary "ActivationPage" as activationPage
control "AuthController" as controller
control "AuthService" as service
entity "User" as user
control "EmailService" as emailService
control "UserRepository" as repo
database "Database" as db

' Start processing flow
activate actor
actor -> signupPage: input(firstName, lastName, email, password, birthDate, gender)
activate signupPage
signupPage -> controller: register(dto)
activate controller

controller -> service: register(dto)
activate service

service -> repo: findByEmail(email)
activate repo
repo -> db: findByEmail(email)
activate db
db --> repo: return(user)
deactivate db
repo --> service: return(user)
deactivate repo

alt email not found
    service -> user: new User(dto)
    activate user
    user --> service: user
    deactivate user

    service -> repo: save(user)
    activate repo
    repo -> db: save(user)
    activate db
    db --> repo: return(user)
    deactivate db
    repo --> service: return(user)
    deactivate repo

    service -> emailService: sendActivationCodeEmail(user)
    activate emailService
    emailService -> emailService: sendEmail()
    emailService --> service: return()
    deactivate emailService

    service --> controller: return(dto)
    controller --> signupPage: return(dto)
    signupPage -> activationPage: navigate()
    activate activationPage
    activationPage --> actor: showActivationPage()

    actor -> actor: checkEmail()
    actor -> activationPage: enterActivationCode(code)
    activationPage -> controller: activateAccount(email, code)
    controller -> service: activateAccount(email, code)

    service -> repo: findByEmailAndActivationCode(email, code)
    activate repo
    repo -> db: findByEmailAndActivationCode(email, code)
    activate db
    db --> repo: return(user)
    deactivate db
    repo --> service: return(user)
    deactivate repo

    service -> service: setActive(user)
    service -> repo: save(user)
    activate repo
    repo -> db: save(user)
    activate db
    db --> repo: return(user)
    deactivate db
    repo --> service: return(user)
    deactivate repo

    service --> controller: return(loginResDTO)
    controller --> activationPage: return(loginResDTO)

    activationPage -> homePage: navigate()
    deactivate activationPage
    activate homePage
    homePage --> actor: message("Account activated successfully")
    deactivate homePage
else email found
    service --> controller: throwException()
    deactivate service
    controller --> signupPage: return(dto)
    deactivate controller
    signupPage --> actor: message("Email already exists")
    deactivate signupPage
end

hide footbox
@enduml