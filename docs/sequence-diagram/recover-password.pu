@startuml recover-password

' General configuration
skinparam defaultFontSize 20
skinparam maxMessageSize 60
skinparam sequenceMessageAlign center

' Actor style configuration
skinparam actorStyle awesome

' Arrow and border thickness configuration
skinparam {
    ArrowThickness 2
    ParticipantBorderThickness 2
    ActorBorderThickness 2
    LifeLineBorderThickness 2
    ActivationBorderThickness 2
}

' Life line color configuration
skinparam LifeLineBorderColor black

' Font style configuration for components
skinparam {
    actorFontStyle bold
    boundaryFontStyle bold
    controlFontStyle bold
    entityFontStyle bold
    databaseFontStyle bold
}

' Define components
actor "Actor" as actor
boundary "LoginPage" as loginPage
boundary "RecoverPasswordPage" as recoverPage
boundary "VerificationCodePage" as verifyPage
boundary "ResetPasswordPage" as resetPage
control "AuthController" as controller
control "AuthService" as service
control "UserService" as userService
control "EmailService" as emailService
control "UserRepository" as repo
database "Database" as db

' Start processing flow
activate actor

actor -> loginPage: clickForgotPassword()
activate loginPage
loginPage -> recoverPage: navigate()
deactivate loginPage
activate recoverPage

actor -> recoverPage: inputEmail(email)
recoverPage -> controller: recoverPasswordCode(email)
activate controller

controller -> service: recoverPasswordCode(email)
activate service

service -> userService: getUser(email)
activate userService
userService -> repo: findByEmail(email)
activate repo
repo -> db: findByEmail(email)
activate db
db --> repo: return(user)
deactivate db
repo --> userService: return(user)
deactivate repo
userService --> service: return(user)
deactivate userService

alt user found
    service -> service: generateResetCode()
    service -> userService: updateResetCode(user, code)
    activate userService
    userService -> repo: save(user)
    activate repo
    repo -> db: save(user)
    activate db
    db --> repo: return(updatedUser)
    deactivate db
    repo --> userService: return(updatedUser)
    deactivate repo
    userService --> service: return(updatedUser)
    deactivate userService

    service -> emailService: sendResetCodeEmail(user)
    activate emailService
    emailService -> emailService: sendEmail()
    emailService --> service: return()
    deactivate emailService

    service --> controller: return()
    controller --> recoverPage: return()
    recoverPage -> verifyPage: navigate()
    activate verifyPage
    verifyPage --> actor: display("Verification code sent")

    actor -> actor: checkEmail()
    actor -> verifyPage: inputVerificationCode(code)

    verifyPage -> controller: verifyResetCode(email, code)
    controller -> service: verifyResetCode(email, code)

    service -> userService: verifyCode(email, code)
    activate userService
    userService -> repo: findByEmailAndResetCode(email, code)
    activate repo
    repo -> db: findByEmailAndResetCode(email, code)
    activate db
    db --> repo: return(user)
    deactivate db
    repo --> userService: return(user)
    deactivate repo
    userService --> service: return(user)
    deactivate userService

    alt code valid
        service --> controller: return(success)
        controller --> verifyPage: return(success)
        verifyPage -> resetPage: navigate()
        activate resetPage
        resetPage --> actor: display("Enter new password")

        actor -> resetPage: inputNewPassword(password, confirmPassword)

        resetPage -> controller: resetPasswordCode(email, code, password, confirmPassword)
        controller -> service: resetPassword(resetAccountDTO)

        service -> userService: updatePassword(user, password)
        activate userService
        userService -> repo: save(user)
        activate repo
        repo -> db: save(user)
        activate db
        db --> repo: return(updatedUser)
        deactivate db
        repo --> userService: return(updatedUser)
        deactivate repo
        userService --> service: return(updatedUser)
        deactivate userService

        service --> controller: return(success)
        controller --> resetPage: return(success)

        resetPage -> loginPage: navigate()
        deactivate resetPage
        activate loginPage
        loginPage --> actor: display("Password reset successful")
        deactivate loginPage
    else code invalid
        service --> controller: throwException()
        controller --> verifyPage: return(error)
        verifyPage --> actor: display("Invalid verification code")
        deactivate verifyPage
    end
else user not found
    service --> controller: throwException()
    deactivate service
    controller --> recoverPage: return(error)
    deactivate controller
    recoverPage --> actor: display("Email not found")
    deactivate recoverPage
end

hide footbox
@enduml
