@startuml

' General configuration
skinparam defaultFontSize 20
skinparam maxMessageSize 60
skinparam sequenceMessageAlign center

' Actor style configuration
skinparam actorStyle awesome

' Arrow and border thickness configuration
skinparam {
    ArrowThickness 2
    ParticipantBorderThickness 2
    ActorBorderThickness 2
    LifeLineBorderThickness 2
    ActivationBorderThickness 2
}

' Life line color configuration
skinparam LifeLineBorderColor black

' Font style configuration for components
skinparam {
    actorFontStyle bold
    boundaryFontStyle bold
    controlFontStyle bold
    entityFontStyle bold
    databaseFontStyle bold
}

' Define components
actor "Actor" as actor
boundary "HomePage" as homePage
boundary "LoginPage" as loginPage
boundary "RecoverPasswordPage" as recoverPage
boundary "ResetPasswordPage" as resetPage
control "AuthController" as controller
control "AuthService" as service
control "UserService" as userService
control "EmailService" as emailService
control "UserRepository" as repo
database "Database" as db

' Start processing flow
activate actor
actor -> loginPage: clickForgotPassword()
activate loginPage

loginPage -> recoverPage: navigate()
deactivate loginPage
activate recoverPage

actor -> recoverPage: inputEmail(email)
recoverPage -> controller: recoverPassword(email)
activate controller

controller -> service: initiatePasswordRecovery(email)
activate service

service -> userService: getUser(email)
activate userService
userService -> repo: findByEmail(email)
activate repo
repo -> db: findByEmail(email)
activate db
db --> repo: return(user)
deactivate db
repo --> userService: return(user)
deactivate repo
userService --> service: return(user)
deactivate userService

alt user found
    service -> service: generateRecoveryToken()
    service -> userService: updateRecoveryToken(user, token)
    activate userService
    userService -> repo: save(user)
    activate repo
    repo -> db: save(user)
    activate db
    db --> repo: return(updatedUser)
    deactivate db
    repo --> userService: return(updatedUser)
    deactivate repo
    userService --> service: return(updatedUser)
    deactivate userService
    
    service -> emailService: sendRecoveryEmail(user, token)
    activate emailService
    emailService -> emailService: sendEmail()
    emailService --> service: return()
    deactivate emailService
    
    service --> controller: return(dto)
    controller --> recoverPage: return(dto)
    recoverPage --> actor: display("Recovery email sent")
    
    actor -> actor: checkEmail()

    actor -> resetPage: inputNewPassword(password, confirmPassword)
    activate resetPage
    resetPage -> controller: resetPassword(token, password)
    controller -> service: resetPassword(token, password)
    alt token valid
        service -> userService: updatePassword(user, password)
        activate userService
        userService -> repo: save(user)
        activate repo
        repo -> db: save(user)
        activate db
        db --> repo: return(updatedUser)
        deactivate db
        repo --> userService: return(updatedUser)
        deactivate repo
        userService --> service: return(updatedUser)
        deactivate userService
        service --> controller: return(success)
        controller --> resetPage: return(success)
        resetPage -> homePage: redirect()
        activate homePage
        homePage --> actor: display("Password reset successful")
        deactivate homePage
    else token invalid
        service --> controller: throwException()
        controller --> resetPage: return(error)
        resetPage --> actor: display("Invalid or expired link")
        deactivate resetPage
    end
else user not found
    service --> controller: throwException()
    deactivate service
    controller --> recoverPage: return(error)
    deactivate controller
    recoverPage --> actor: display("Email not found")
    deactivate recoverPage
    deactivate actor
end

hide footbox
@enduml
