@startuml

' General configuration
skinparam defaultFontSize 20
skinparam sequenceMessageAlign center

' Actor style configuration
skinparam actorStyle awesome

' Arrow and border thickness configuration
skinparam {
    ArrowThickness 2
    ParticipantBorderThickness 2
    ActorBorderThickness 2
    LifeLineBorderThickness 2
    ActivationBorderThickness 2
}

' Life line color configuration
skinparam LifeLineBorderColor black

' Font style configuration for components
skinparam {
    actorFontStyle bold
    boundaryFontStyle bold
    controlFontStyle bold
    entityFontStyle bold
    databaseFontStyle bold
}

' Define components
actor "Customer" as actor
boundary "HomePage" as homePage
boundary "AccountPage" as accountPage
boundary "ShippingProfilesPage" as profilePage
boundary "AddProfileModal" as addModal
control "ShippingProfileController" as controller
control "ShippingProfileService" as service
entity "ShippingProfile" as profile
control "ShippingProfileRepository" as profileRepo
database "Database" as db

' Start processing flow
activate actor

actor -> homePage: clickAccountIcon()
activate homePage

homePage -> accountPage: navigate()
deactivate homePage
activate accountPage

actor -> accountPage: clickShippingProfilesTab()
accountPage -> profilePage: navigate()
deactivate accountPage
activate profilePage

actor -> profilePage: clickAddNewProfile()
profilePage -> addModal: openModal()
activate addModal

actor -> addModal: inputProfileData()
actor -> addModal: clickSave()

addModal -> controller: createShippingProfile(profileDTO)
activate controller

controller -> service: createShippingProfile(profileDTO)
activate service

alt valid input
    service -> profile: new Profile(profileDTO)
    activate profile
    profile --> service: return(profile)
    deactivate profile
    
    service -> profileRepo: save(profile)
    activate profileRepo
    profileRepo -> db: save(profile)
    activate db
    db --> profileRepo: return(savedProfile)
    deactivate db
    profileRepo --> service: return(savedProfile)
    deactivate profileRepo
    
    service --> controller: return(profileDTO)
    controller --> addModal: return(success)
    addModal -> addModal: closeModal()
    addModal --> actor: display("Profile added successfully")
else invalid input
    service --> controller: throwException()
    deactivate service
    controller --> addModal: return(error)
    deactivate controller
    addModal --> actor: display("Please fill all required fields")
end

deactivate addModal
deactivate profilePage

hide footbox
@enduml