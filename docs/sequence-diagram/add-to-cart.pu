@startuml

' General configuration
skinparam defaultFontSize 20
skinparam sequenceMessageAlign center

' Actor style configuration
skinparam actorStyle awesome

' Arrow and border thickness configuration
skinparam {
    ArrowThickness 2
    ParticipantBorderThickness 2
    ActorBorderThickness 2
    LifeLineBorderThickness 2
    ActivationBorderThickness 2
}

' Life line color configuration
skinparam LifeLineBorderColor black

' Font style configuration for components
skinparam {
    actorFontStyle bold
    boundaryFontStyle bold
    controlFontStyle bold
    entityFontStyle bold
    databaseFontStyle bold
}

' Define components
actor "Customer" as actor
boundary "ProductDetailPage" as detailPage
control "CartController" as controller
control "CartService" as service
control "ProductVariantRepository" as variantRepo
control "CartRepository" as cartRepo
database "Database" as db

' Start processing flow
activate actor

actor -> detailPage: selectVariant(size, color)
activate detailPage

actor -> detailPage: inputQuantity(quantity)

alt product in stock
    actor -> detailPage: clickAddToCart()
    
    detailPage -> controller: addToCart(variantId, quantity)
    activate controller
    
    controller -> service: addToCart(dto)
    activate service
    
    service -> variantRepo: findById(variantId)
    activate variantRepo
    variantRepo -> db: findById(variantId)
    activate db
    db --> variantRepo: return(variant)
    deactivate db
    variantRepo --> service: return(variant)
    deactivate variantRepo
    
    alt sufficient stock
        service -> service: updateCart()
        service -> cartRepo: update(cart)
        activate cartRepo
        cartRepo -> db: update(cart)
        activate db
        db --> cartRepo: return(result)
        deactivate db
        cartRepo --> service: return(result)
        deactivate cartRepo
        service --> controller: return(result)
        controller --> detailPage: return(result)
        detailPage --> actor: display(result)
    else insufficient stock
        service --> controller: throwException("Not enough stock")
        controller --> detailPage: return(error)
        detailPage --> actor: display("Not enough stock")
    end
    
    deactivate service
    deactivate controller
    
else product out of stock
    detailPage --> actor: disableAddToCartButton()
    detailPage --> actor: display("Out of stock")
end

deactivate detailPage

hide footbox
@enduml