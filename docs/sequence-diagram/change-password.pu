@startuml

' General configuration
skinparam defaultFontSize 20
skinparam maxMessageSize 60
skinparam sequenceMessageAlign center

' Actor style configuration
skinparam actorStyle awesome

' Arrow and border thickness configuration
skinparam {
    ArrowThickness 2
    ParticipantBorderThickness 2
    ActorBorderThickness 2
    LifeLineBorderThickness 2
    ActivationBorderThickness 2
}

' Life line color configuration
skinparam LifeLineBorderColor black

' Font style configuration for components
skinparam {
    actorFontStyle bold
    boundaryFontStyle bold
    controlFontStyle bold
    entityFontStyle bold
    databaseFontStyle bold
}

' Define components
actor "Actor" as actor
boundary "HomePage" as homePage
boundary "AccountPage" as accountPage
control "UserController" as controller
control "UserService" as service
control "UserRepository" as repo
database "Database" as db

' Start processing flow
activate actor
actor -> homePage: clickAccountIcon()
activate homePage

homePage -> accountPage: navigate()
deactivate homePage
activate accountPage

actor -> accountPage: clickChangePassword()
accountPage -> accountPage: inputPasswords(oldPwd, newPwd, confirmPwd)
accountPage -> controller: changePassword(dto)
activate controller

controller -> service: changePassword(dto)
activate service

service -> repo: findByEmail(email)
activate repo
repo -> db: findByEmail(email)
activate db
db --> repo: return(user)
deactivate db
repo --> service: return(user)
deactivate repo

service -> service: validateOldPassword()

alt valid old password
    service -> service: validateNewPasswords()
    alt valid new password match
        service -> repo: save(user)
        activate repo
        repo -> db: save(user)
        activate db
        db --> repo: return(updatedUser)
        deactivate db
        repo --> service: return(updatedUser)
        deactivate repo
        
        service --> controller: return()
        controller --> accountPage: return(success)
        accountPage --> actor: display("Password updated successfully")
    else passwords not match
        service --> controller: throwException("New passwords not match")
        controller --> accountPage: return(error)
        accountPage --> actor: display("New passwords do not match")
    end
else invalid old password
    service --> controller: throwException("Old password not match")
    deactivate service
    controller --> accountPage: return(error)
    deactivate controller
    accountPage --> actor: display("Current password is incorrect")
    deactivate accountPage
end

deactivate accountPage

hide footbox
@enduml
